// <auto-generated />
using System;
using EventsService.DataAccess.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventsService.Migrations
{
    [DbContext(typeof(EbkEventDbContextFinal3_))]
    [Migration("20191116111600_last2")]
    partial class last2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventsService.Domain.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhotoUrl");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("EventsService.Domain.Atendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EbKRegNumber")
                        .IsRequired();

                    b.Property<Guid?>("EventId");

                    b.Property<Guid?>("MembersId");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MembersId");

                    b.ToTable("Atendees");
                });

            modelBuilder.Entity("EventsService.Domain.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<string>("Location");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventsService.Domain.EventBags", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid?>("EventId");

                    b.Property<string>("FileLink");

                    b.Property<string>("FileName");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("EventsService.Domain.EventDays", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("EndDate");

                    b.Property<Guid?>("EventId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventDays");
                });

            modelBuilder.Entity("EventsService.Domain.EventSessions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Day");

                    b.Property<TimeSpan?>("EndTime");

                    b.Property<string>("EventCode")
                        .IsRequired();

                    b.Property<Guid?>("EventId");

                    b.Property<string>("Name");

                    b.Property<Guid>("SpeakerId");

                    b.Property<TimeSpan?>("StartTime");

                    b.Property<int>("Status");

                    b.Property<string>("Venue");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventSessions");
                });

            modelBuilder.Entity("EventsService.Domain.Members", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CountryId");

                    b.Property<string>("EbkRegNumber")
                        .IsRequired();

                    b.Property<int?>("EbkStatus");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int?>("Gender");

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<string>("LastName");

                    b.Property<string>("OrganisationName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Phone");

                    b.Property<int?>("Status");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("EventsService.Domain.Messages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("DeleteForAll");

                    b.Property<bool?>("DeleteForMe");

                    b.Property<bool?>("DeleteForYou");

                    b.Property<string>("MemberId");

                    b.Property<Guid?>("MembersId");

                    b.Property<string>("Message");

                    b.Property<bool?>("Sent");

                    b.Property<DateTime?>("TimeSent");

                    b.HasKey("Id");

                    b.HasIndex("MembersId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("EventsService.Domain.Notes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AtendeeId");

                    b.Property<string>("MyNotes");

                    b.Property<string>("SessionId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("EventsService.Domain.OriginCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("EventsService.Domain.Questions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PosterId");

                    b.Property<DateTime?>("PostingDate");

                    b.Property<string>("QuestionBody");

                    b.Property<Guid?>("RespondentId");

                    b.Property<string>("ResponseBody");

                    b.Property<DateTime?>("ResponseDate");

                    b.Property<Guid>("SessionId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("PosterId");

                    b.HasIndex("RespondentId");

                    b.HasIndex("SessionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EventsService.Domain.Speakers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("EventCode")
                        .IsRequired();

                    b.Property<Guid?>("EventId");

                    b.Property<string>("FirstName");

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<string>("LastName");

                    b.Property<string>("MoreInfo");

                    b.Property<string>("OriginCompany");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("EventsService.Domain.Sporsors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CellContacts");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("EventCode");

                    b.Property<Guid?>("EventId");

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<string>("MoreInfo");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("WebSiteLink");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Sporsors");
                });

            modelBuilder.Entity("EventsService.Domain.Atendee", b =>
                {
                    b.HasOne("EventsService.Domain.Event", "Event")
                        .WithMany("Atendees")
                        .HasForeignKey("EventId");

                    b.HasOne("EventsService.Domain.Members", "Members")
                        .WithMany()
                        .HasForeignKey("MembersId");
                });

            modelBuilder.Entity("EventsService.Domain.EventBags", b =>
                {
                    b.HasOne("EventsService.Domain.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("EventsService.Domain.EventDays", b =>
                {
                    b.HasOne("EventsService.Domain.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("EventsService.Domain.EventSessions", b =>
                {
                    b.HasOne("EventsService.Domain.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("EventsService.Domain.Members", b =>
                {
                    b.HasOne("EventsService.Domain.OriginCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("EventsService.Domain.Messages", b =>
                {
                    b.HasOne("EventsService.Domain.Members", "Members")
                        .WithMany()
                        .HasForeignKey("MembersId");
                });

            modelBuilder.Entity("EventsService.Domain.Questions", b =>
                {
                    b.HasOne("EventsService.Domain.Atendee", "Poster")
                        .WithMany()
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventsService.Domain.Speakers", "Respondent")
                        .WithMany()
                        .HasForeignKey("RespondentId");

                    b.HasOne("EventsService.Domain.EventSessions", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventsService.Domain.Speakers", b =>
                {
                    b.HasOne("EventsService.Domain.Event", "Event")
                        .WithMany("Speakers")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("EventsService.Domain.Sporsors", b =>
                {
                    b.HasOne("EventsService.Domain.Event", "Event")
                        .WithMany("Sporsors")
                        .HasForeignKey("EventId");
                });
#pragma warning restore 612, 618
        }
    }
}
